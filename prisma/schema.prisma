
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Admin {
  id          Int       @id @default(autoincrement())
  email       String    @db.VarChar(255) @unique
  name        String    @db.VarChar(63)
  lastname    String    @db.VarChar(63)
  dni         Int
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255) @unique
  icon        Bytes
  books       Book[]
}

// Los idiomas utilizados
model Lang {
  id            Int      @id @default(autoincrement())
  language      String   @db.VarChar(15) @unique
  display       String
  books         Book[]
}

// La institución a la que pertenece un autor
model Institution {
  id            Int                   @id @default(autoincrement())
  name          String                @db.VarChar(255) @unique
  authors       AuthorOnInstitution[]
}

// El autor de un libro
model Author {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(20)
  surname       String   @db.VarChar(20)
  email         String   @db.VarChar(255) @unique
  institutions  AuthorOnInstitution[]
  books         AuthorOnBook[]
}

// Tabla que modela la relacion Instutición-Autor
model AuthorOnInstitution {
  id          Int         @id @default(autoincrement())
  author      Author      @relation(fields: [authorId], references: [id])
  authorId    Int
  institution Institution @relation(fields: [instId], references: [id])
  instId      Int
}

// Un caso. Los casos representan un grafo de libros, es decir,
// libros que se relacionan entre sí.
model Case {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255) @unique
  books       CaseOnBook[]
  startCase   CaseOnCase[]    @relation("start")
  endCase     CaseOnCase[]    @relation("end")
}

// Las relaciones entre los libros pertenecientes a un caso
model CaseOnBook {
  case        Case            @relation(fields: [caseId], references: [id])
  caseId      Int
  start       Book            @relation("start", fields: [startId], references: [id])
  startId     Int
  end         Book?           @relation("end", fields: [endId], references: [id])
  endId       Int
  description String?
  @@id([caseId, startId, endId])
}

// Las relaciones entre dos casos
model CaseOnCase {
  start       Case            @relation("start", fields: [startId], references: [id])
  startId     Int
  end         Case            @relation("end", fields: [endId], references: [id])
  endId       Int
  description String?
  @@id([startId, endId])
}

// La tabla que guarda los PDFs
model Book {
  id          Int             @id @default(autoincrement())
  // El nombre del archivo
  title       String          @db.VarChar(255)
  // La descripción del archivo
  description String
  // El archivo, para mostrarlo
  file        Bytes
  // El contenido en forma de lexemas, para habilitar la busqueda por texto
  content     Unsupported("tsvector")
  // Para identificar univocamente segun el contenido del PDF
  md5         String          @unique
  // El idioma del archivo, para optimizar las búsquedas
  lang        Lang            @relation(fields: [langId], references: [id])
  langId      Int
  // La categoría con la que fue marcado
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  Int
  // Los autores del libro
  authors     AuthorOnBook[]
  startCase   CaseOnBook[]    @relation("start")
  endCase     CaseOnBook[]    @relation("end")
  // Si esta pendiente de corrección o no
  pending     Boolean
}

model AuthorOnBook {
  id          Int             @id @default(autoincrement())
  book        Book            @relation(fields: [bookId], references: [id])
  bookId      Int
  author      Author          @relation(fields: [authorId], references: [id])
  authorId    Int
  @@unique([bookId, authorId])
}
